{
  "name": "n8n workflow RAG agent - Github repo",
  "nodes": [
    {
      "parameters": {
        "content": "## Run Each Node Once to Set Up Database Tables",
        "height": 300,
        "width": 680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2000,
        -80
      ],
      "typeVersion": 1,
      "id": "6aa8c43a-c238-4a36-991a-684976536df3",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE EXTENSION IF NOT EXISTS vector;\n\nCREATE TABLE IF NOT EXISTS n8n_workflows (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    filename TEXT UNIQUE NOT NULL,\n    workflow_name TEXT,\n    description TEXT,\n    trigger_type TEXT,\n    complexity TEXT,\n    node_count INT,\n    integrations JSONB DEFAULT '[]'::jsonb,\n    tags JSONB DEFAULT '[]'::jsonb,\n    mermaid_diagram TEXT,\n    raw_json JSONB DEFAULT '{}'::jsonb,\n    metadata JSONB DEFAULT '{}'::jsonb,\n    embedding VECTOR(1536)\n);\n\n-- Optional: Create an index for faster similarity search on the embedding column\nCREATE INDEX IF NOT EXISTS ON n8n_workflows USING ivfflat (embedding vector_l2_ops) WITH (lists = 100);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1740,
        20
      ],
      "id": "5382f3ae-906b-473c-8080-91597049d38d",
      "name": "Initialize n8n_workflows Table"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE OR REPLACE FUNCTION match_n8n_workflows (\n  query_embedding VECTOR(1536),\n  match_count INT DEFAULT NULL,\n  filter JSONB DEFAULT '{}'\n) RETURNS TABLE (\n  id UUID,\n  filename TEXT,\n  workflow_name TEXT,\n  description TEXT,\n  trigger_type TEXT,\n  complexity TEXT,\n  node_count INT,\n  integrations JSONB,\n  tags JSONB,\n  mermaid_diagram TEXT,\n  raw_json JSONB,\n  metadata JSONB,\n  similarity FLOAT\n)\nLANGUAGE plpgsql\nAS $$\n#variable_conflict use_column\nBEGIN\n  RETURN QUERY\n  SELECT\n    id,\n    filename,\n    workflow_name,\n    description,\n    trigger_type,\n    complexity,\n    node_count,\n    integrations,\n    tags,\n    mermaid_diagram,\n    raw_json,\n    metadata,\n    1 - (n8n_workflows.embedding <=> query_embedding) AS similarity\n  FROM n8n_workflows\n  WHERE (filter = '{}'::jsonb OR metadata @> filter)\n  ORDER BY n8n_workflows.embedding <=> query_embedding\n  LIMIT match_count;\nEND;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1940,
        200
      ],
      "id": "9559d4fa-4cc4-459c-b04c-5cf7baccdc2e",
      "name": "Create n8n_workflows Match Function"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available n8n workflow documents and their metadata.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "n8n_workflows",
          "mode": "list",
          "cachedResultName": "n8n_workflows"
        },
        "returnAll": true,
        "options": {
          "outputColumns": [
            "id",
            "filename",
            "workflow_name",
            "description",
            "trigger_type",
            "complexity",
            "node_count",
            "integrations",
            "tags",
            "mermaid_diagram"
          ]
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -720,
        60
      ],
      "id": "54c084c6-1af4-4243-93b0-78db1a170466",
      "name": "List N8N Workflows",
      "credentials": {
        "postgres": {
          "id": "xnUo5PklJhMIH1Tv",
          "name": "supabase-caiyman-ai"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a workflow filename (e.g., '0001_Telegram_Schedule_Automation_Scheduled.json'), fetches the raw JSON content of the n8n workflow.",
        "operation": "executeQuery",
        "query": "SELECT raw_json FROM n8n_workflows WHERE filename = $1;",
        "options": {
          "queryReplacement": "={{ $fromAI('filename') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -580,
        60
      ],
      "id": "380ead51-82e5-42de-bc60-c51fa66b8991",
      "name": "Get N8N Workflow Raw JSON",
      "credentials": {
        "postgres": {
          "id": "xnUo5PklJhMIH1Tv",
          "name": "supabase-caiyman-ai"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Initialize n8n_workflows Table": {
      "main": [
        [
          {
            "node": "Create n8n_workflows Match Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create n8n_workflows Match Function": {
      "main": []
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "acd09d8d-525c-4dfe-a31b-c6299e5c3c73",
  "meta": {
    "instanceId": "417b0a8b2a10d0a50938a93dd6b8dd01385b21d758ab43693102c5df3493c401"
  },
  "id": "22kz1iU6BCLVC4Dk",
  "tags": [
    {
      "createdAt": "2025-03-01T17:49:49.001Z",
      "updatedAt": "2025-03-01T17:49:49.001Z",
      "id": "GNJxsCbalVxUlYUk",
      "name": "RAG"
    }
  ]
}